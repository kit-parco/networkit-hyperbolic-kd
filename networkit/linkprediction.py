
from _NetworKit import KatzIndex, CommonNeighborsIndex, JaccardIndex, PreferentialAttachmentIndex, AdamicAdarIndex, RandomEdgePartitioner, ROCMetric, KFoldCrossValidator, PrecisionRecallMetric, UnconnectedNodesFinder

from . import graph

import numpy as np

try:
  import sklearn
except ImportError:
  print(""" WARNING: module 'sklearn' not found, link prediction functionality will be limited """)

def trainClassifier(trainingSet, trainingGraph, classifier, *linkPredictors):
  """
  Trains the given classifier with the feature-vectors generated by the given linkPredictors.

  Parameters
  ----------
  trainingSet : vector[pair[node, node]]
    Vector of node-pairs to generate features for,
  trainingGraph : Graph
    Training graph containg all edges from the training set.
  classifier:
    Scikit-learn classifier to train.
  linkPredictors:
    Predictors used for the generation of feature-vectors.
  """
  trainingClasses = getClasses(trainingSet, trainingGraph)
  trainingSamples = getSamples(trainingSet, *linkPredictors)
  classifier.fit(trainingSamples, trainingClasses)

def getSamples(nodePairs, *linkPredictors):
  """
  Returns a numpy array of shape (#nodePairs, #linkPredictors) containing the generated
  scores from the predictors for the node-pairs.
  """
  return np.column_stack(([list(zip(*p.runOnParallel(nodePairs)))[1] for p in linkPredictors]))

def getClasses(nodePairs, graph):
  """
  Returns a numpy array containing the classes (1 = link, 0 = absent link) of the given node-pairs.
  """
  return np.array(list(map(lambda p: 1 if graph.hasEdge(p[0], p[1]) else 0, nodePairs)))
#include "Prim.h"

namespace NetworKit {

std::vector<std::pair<node, node> > Prim::run(Graph G, node v) {
	std::vector<edgeweight> V(G.numberOfNodes(), INFINITY);
	V[v] = 0;
	
	Aux::PrioQueue<edgeweight, node> pq = Aux::PrioQueue<edgeweight, node>(V);
	std::vector<node> pred(G.numberOfNodes());
	
	while (pq.size() > 0) {
		node u = pq.extractMin().second;
		V[u] = -1;
		G.forWeightedNeighborsOf(u, [&](node w, edgeweight c) {
			if (V[w] != -1 && c < V[w]) {
				V[w] = c;
				pq.decreaseKey(c, w);
				pred[w] = u;
			}
		});
	}
	
	std::vector<std::pair<node, node> > result;
	G.forNodes([&](node u) {
		if (u != v) {
			result.push_back(std::pair<node, node>(u, pred[u]));
		}
	});
	
	return result;
}

} /* namespace NetworKit */
